service: product-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: eu-central-1
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    PRODUCTS_TABLE: Products-service-${self:provider.stage}
    STOCKS_TABLE: Stocks-service-${self:provider.stage}
    ACCOUNT_ID: 959222269509
    TOPIC_ARN: arn:aws:sns:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:productCreatedTopic
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STOCKS_TABLE}"
    - Effect: Allow
      Action:
        - sqs:*
      Resource: arn:aws:sqs:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:catalogItemsQueue
    - Effect: Allow
      Action:
        - sns:*
      Resource: arn:aws:sns:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:productCreatedTopic

package:
  individually: true

functions:
  getProductsList:
    handler: src/functions/index.getProductsList
    events:
      - http:
          path: /products
          method: get
          cors: true
  getProductsById:
    handler: src/functions/index.getProductsById
    events:
      - http:
          path: /products/{productId}
          method: get
          cors: true
  createProduct:
    handler: src/functions/index.createProduct
    events:
      - http:
          path: /products
          method: post
          cors: true
  catalogBatchProcess:
    handler: src/functions/index.catalogBatchProcess
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:catalogItemsQueue
          batchSize: 5
plugins:
  - serverless-esbuild
  - serverless-offline-sqs
  - serverless-offline

resources:
  Resources:
    ProductsListTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: title
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: title
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 4
          WriteCapacityUnits: 4
    StocksListTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STOCKS_TABLE}
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
    CatalogItemsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: catalogItemsQueue
    ProductCreatedTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: productCreatedTopic
        Subscription:
          - Endpoint: akhadyulchiev@gmail.com
            Protocol: email
    ProductCreatedTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: akhadyulchiev@gmail.com
        Protocol: email
        TopicArn:
          Ref: ProductCreatedTopic

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: ["aws-sdk"]
    target: "node16"
    platform: node
    concurrency: 10
#  serverless-offline-sqs:
#    autoCreate: true
#    apiVersion: '2012-11-05'
#    endpoint: http://localhost:9324
#    region: ${self:provider.region}
#    accessKeyId: local
#    secretAccessKey: local
#    skipCacheInvalidation: false
  serverless_offline:
    allowCache: true
    noTimeout: true
    httpPort: 3000
    lambdaPort: 3002
